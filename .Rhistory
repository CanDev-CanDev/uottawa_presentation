#                            Tab = "\t"),
#                selected = ","),
#
#   # Input: Select quotes ----
#   radioButtons("quote", "Quote",
#                choices = c(None = "",
#                            "Double Quote" = '"',
#                            "Single Quote" = "'"),
#                selected = '"'),
#
#   # Horizontal line ----
#   tags$hr(),
#
#   # Input: Select number of rows to display ----
#   radioButtons("disp", "Display",
#                choices = c(Head = "head",
#                            All = "all"),
#                selected = "head")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Data file ----
tableOutput("contents")
)
)
runExample()
runExample(09_upload)
runExample("09_upload")
runExample("01_hello")
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
library(shiny)
library(CANSIM2R)
library(dplyr)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
install.packages(c("data.table", "digest", "dplyr", "fansi", "foreign", "MASS", "mime", "R6", "Rcpp", "rstudioapi", "stringi", "survival", "tidyselect"))
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
install.packages("CANSIM2R")
library(CANSIM2R)
a<-c(4,5)
rm(a)
getOption("repos")
table04 <- getCANSIM(18100004, raw = TRUE)
table04
table04 <- getCANSIM(17100005, raw=FALSE)
table04 <- getCANSIM(17100005, raw=TRUE)
colnames(table04)
head(tabel04)
head(table04)
# Gross domestic product (GDP) at basic prices, by industry, annual average (x 1,000,000)
table04 <- getCANSIM(36100434, raw=TRUE)
head(table04)
library(dplyr)
unique(table04$Seasonal.adjustment)
unique(table04$prices)
unique(table04$Seasonal.adjustment)
unique(table04$Seasonal.prices)
unique(table04$Prices)
gdp <- table04 %>% select(REF_DATE, North.American.Industry.Classification.System..NAICS.="NAICS") %>%
filter(Seasonal.adjustment %in% "Seasonally adjusted at annual rates")
head(table04)
gdp <- table04 %>% select(X.U.FEFF.REF_DATE, North.American.Industry.Classification.System..NAICS.="NAICS") %>%
filter(Seasonal.adjustment %in% "Seasonally adjusted at annual rates")
gdp <- table04 %>% select(X.U.FEFF.REF_DATE, "North.American.Industry.Classification.System..NAICS."="NAICS") %>%
filter(Seasonal.adjustment %in% "Seasonally adjusted at annual rates")
gdp <- table04 %>% select(X.U.FEFF.REF_DATE, "NAICS"="North.American.Industry.Classification.System..NAICS.") %>%
filter(Seasonal.adjustment %in% "Seasonally adjusted at annual rates")
unique(table04$GEO)
gdp <- table04 %>% select("time"="X.U.FEFF.REF_DATE", "naics"="North.American.Industry.Classification.System..NAICS.",  "s_a"="Seasonal.adjustment") %>%
filter(Seasonal.adjustment %in% "Seasonally adjusted at annual rates")
gdp <- table04 %>% select("time"="X.U.FEFF.REF_DATE", "naics"="North.American.Industry.Classification.System..NAICS.",  "s_a"="Seasonal.adjustment") %>%
filter(s_a %in% "Seasonally adjusted at annual rates")
dim(gdp)
head(gdp)
head(table04)
gdp <- table04 %>% select("time"="X.U.FEFF.REF_DATE", "naics"="North.American.Industry.Classification.System..NAICS.",  "s_a"="Seasonal.adjustment", "value"="VALUE") %>%
filter(s_a %in% "Seasonally adjusted at annual rates")
head(gdp)
gdp <- table04 %>% filter(Seasonal.adjustment %in% "Seasonally adjusted at annual rates")%>%
select("time"="X.U.FEFF.REF_DATE", "naics"="North.American.Industry.Classification.System..NAICS.",  "s_a"="Seasonal.adjustment", "value"="VALUE")
head(gdp)
gdp <- table04 %>% filter(Seasonal.adjustment %in% "Seasonally adjusted at annual rates")%>%
select("time"="X.U.FEFF.REF_DATE", "naics"="North.American.Industry.Classification.System..NAICS.", "value"="VALUE")
head(gdp)
edit(gdp)
head(gdp)
typeof(gdp$time)
library(ggplot2)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("GDP Analysis"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
selectInput(inputId = "industry",
label = "Select an industry:",
choices = gdp$naics)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "gdp")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
pointer <- reactive({
data <- gpd %>% select(input$industry %in% gdp$naics)
})
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
ggplot(pointer, aes(x= gdp$time , y= gdp$value))
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("GDP Analysis"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
selectInput(inputId = "industry",
label = "Select an industry:",
choices = gdp$naics)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "gdp")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
pointer <- reactive({
data <- gpd %>% select(input$industry %in% gdp$naics)
})
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$gdp <- renderPlot({
ggplot(pointer, aes(x= gdp$time , y= gdp$value))
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("GDP Analysis"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
selectInput(inputId = "industry",
label = "Select an industry:",
choices = gdp$naics)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "gdp")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
pointer <- reactive({
data <- gpd %>% select(input$industry %in% gdp$naics)
})
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$gdp <- renderPlot({
ggplot(pointer, aes(x= gdp$time , y= gdp$value))+
geom_line()
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
ggplot(pointer, aes(x= gdp$time , y= gdp$value))+
geom_line()
?ggplot
df <- data.frame(
gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30)
)
ggplot(df, aes(gp, y)) +
geom_point()
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("GDP Analysis"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
selectInput(inputId = "industry",
label = "Select an industry:",
choices = gdp$naics)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "gdp")
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
pointer <- reactive({
data <- gpd %>% select(input$industry %in% gdp$naics)
})
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$gdp <- renderPlot({
ggplot(pointer(), aes(x= gdp$time , y= gdp$value))+
geom_line()
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
